// 1. Реалізувати алгоритм: сортування бульбашкою для наступного масиву [1, 2, 5, 4, 10, 3, 13, 11, 100, 8, 15, 20, 19]
console.log('1. Реалізувати алгоритм: сортування бульбашкою для наступного масиву [1, 2, 5, 4, 10, 3, 13, 11, 100, 8, 15, 20, 19]')
const a = [1, 2, 5, 4, 10, 3, 13, 11, 100, 8, 15, 20, 19];
let b = 0;
for (let i = 0; i < a.length; i++) {
    for (let j = 0; j < a.length; j++) {
        b++;
        if(a[j] > a[j+1]) {
            let templ = a[j];
            a[j] = a[j+1];
            a[j+1] = templ
        }
    }
}
console.log(a, b);
//2. Вивести всі алгоритми цієї лекції і попередньої в функції, викличте функції
// Бульбошка
console.log('2. Вивести всі алгоритми цієї лекції і попередньої в функції, викличте функції');
console.log('function - Bubble');

function Bubble() {
    const a = [1, 2, 5, 4, 10, 3, 13, 11, 100, 8, 15, 20, 19];
let b = 0;
for (let i = 0; i < a.length; i++) {
    for (let j = 0; j < a.length; j++) {
        b++;
        if(a[j] > a[j+1]) {
            let templ = a[j];
            a[j] = a[j+1];
            a[j+1] = templ
        }
    }
} console.log(a, b);
}
Bubble()  // викликаю функцію алгоритм 'bubble' сортування
// Лінійний
console.log('Лінійний пошук цифри з застосуванням функції по масиву [1, 2, 5, 4, 10, 3, 13, 11, 100, 8, 15, 20, 19]');
console.log('function - linear');
function Linear(nom) {
    const a = [1, 2, 5, 4, 10, 3, 13, 11, 100, 8, 15, 20, 19];
    for (let i = 0; i < a.length; i++) {
    if ( nom === a[i]) {
       console.log(nom,'знайшов');
       break;
    } else (nom !== a[i]) 
       console.log(nom, i, 'не знайшов');
    } 
}
Linear(5) // цифра пошуку яка виведе в консолі (приклад) приведе функцію алгоритм лінійного пошуку
Linear(100) // викликаю функцію алгоритм лінійного пошуку
// Бінарний
console.log('Бінарний пошук цифри з застосуванням функції по масиву [1, 2, 5, 4, 10, 3, 13, 11, 100, 8, 15, 20, 19]');
console.log('function - binar search');
function Binar() {
    const arr = [1, 2, 3, 4, 5, 8, 10, 11, 13, 15, 19, 20, 100];
const poisk = 2;
let rozr = 0;
let start = 0;
let end = arr.length-1;
while (start <= end) {
    rozr++
    let center = Math.floor((start + end) / 2);
    if (arr[center] === poisk) {
        console.log('Цифра введена успішно');
        break;
    } else if (arr[center] > poisk ) {
        end = center - 1;
    } else if (arr[center] < poisk) {
        start = center + 1;
    } else if (arr[center] !==poisk) {
        console.log('цифру не знайдено', center);
        break;
    } else (arr[center] !==poisk)
    console.log('цифру не знайдено', center);
    
} console.log('Дії', rozr, 'Цифра', poisk);
}
Binar() // викликаю функцію бінарного пошуку
// 3. Створіть функцію яка виводить в консоль пояснення того що таке hosting
console.log('3. Створіть функцію яка виводить в консоль пояснення того що таке hosting');
function Host() {
    console.log('Hosting - "механізм" який йде перед компіляцією (читання коду з верху до низу) функції перекидує до верху (читання коду), змінні даних робить доступним після їх декларації.');
}
Host()
// 4. Створіть функцію яка виводить в консоль пояснення що таке scope
console.log('4. Створіть функцію яка виводить в консоль пояснення що таке scope');
function Scop() {
    console.log('Це область видимості, будь-які фігурні дужки: ({ }), поняття, що визначає область, в якій було створено і проініціалізовано, місце в якому "живуть" конкретні данні, не випускають дані на зовні цієї області.');
}
Scop()
// 5. Створіть функцію яка виводить в консоль пояснення чим поганий var
console.log('5. Створіть функцію яка виводить в консоль пояснення чим поганий var');
function Varr() {
    console.log('"hosting" бере "var" змінну, але без його значення, в консолі помбачемо "undefined", а ще він застарілий спосіб оголошення змінної, не використовуємо його.');
}
Varr()